# Integrate Graphene into the app image
# This file is used in a multistage docker build process, in which the previous image is named "graphene"
FROM ${appImage}

# Update any packages
RUN apt-get update \
    && apt-get upgrade -y \
    && env DEBIAN_FRONTEND=noninteractive apt-get install -y \
    python3 \
    python3-pip \
    libprotobuf-c-dev \
    binutils \
    openssl \
    && /usr/bin/pip3 install protobuf

# Copy Graphene runtime and signer tools to /graphene
RUN mkdir /graphene \
    && mkdir /graphene/Runtime \
    && mkdir /graphene/signer
COPY --from=graphene /graphene/Runtime/ /graphene/Runtime
COPY --from=graphene /graphene/Pal/src/host/Linux-SGX/signer/ /graphene/signer
COPY --from=graphene /graphene/Pal/src/host/Linux-SGX/generated_offsets.py /graphene/signer/

RUN mkdir -p /graphene/Pal/src

# Prepare application loader
COPY apploader.sh .
RUN chmod u+x apploader.sh

# Finalize the manifest
COPY *.manifest .
COPY finalize_manifests.py /
# 1) Replace app path with real path and update library path,
# 2) Add all files under / as trusted files,
# 3) Make manifest executable
RUN python3 /finalize_manifests.py / ${binary}.manifest ${user_manifests}

# Sign application and manifest
RUN /graphene/signer/pal-sgx-sign \
    -libpal /graphene/Runtime/libpal-Linux-SGX.so \
    -key /graphene/signer/enclave-key.pem \
    -output ${binary}.manifest.sgx \
    -manifest ${binary}.manifest \
    && chmod u+x ${binary}.manifest.sgx

# Define default command
ENTRYPOINT  ["/bin/bash", "./apploader.sh"]
CMD []
