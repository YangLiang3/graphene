# Integrate graphene into the app image 
# This file assumes to be used in a multistage docker build process, in which the previous container is called graphene
FROM ${appImage}

# update any packages
RUN apt-get update && apt-get upgrade -y

# Copy graphene runtime and signer tools to /graphene
RUN mkdir /graphene \
    && mkdir /graphene/Runtime \
    && mkdir /graphene/signer
COPY --from=graphene /graphene/Runtime/ /graphene/Runtime
COPY --from=graphene /graphene/Pal/src/host/Linux-SGX/signer/ /graphene/signer
COPY --from=graphene /graphene/Pal/src/host/Linux-SGX/generated_offsets.py /graphene/signer/

RUN mkdir -p /graphene/Pal/src

# prepare application loader
COPY apploader.sh /
RUN chmod u+x /apploader.sh

# finalize the manifest
COPY ${binary}.manifest /
COPY markTrustedFiles.sh /
# 1) replace app path with real path and update library path 2) add all files as trusted files 3) remove aux
RUN  sed -i "s/BINARY_PATH/$$(which ${binary} | sed 's:/:\\/:g')/g" ${binary}.manifest \
    && sed -i "s/LIBRARY_PATHS/$$(ldconfig -v 2>/dev/null | grep -v ^'\s' | tr -d '\n' | sed 's:/:\\/:g')/g" ${binary}.manifest \
    && chmod u+x ./markTrustedFiles.sh \
    && /markTrustedFiles.sh / ${binary}.manifest  \
    && chmod u+x ${binary}.manifest \
    && rm ./markTrustedFiles.sh files checkedfiles

 RUN env DEBIAN_FRONTEND=noninteractive apt-get install -y \
    python3 \
    python3-protobuf \
    libprotobuf-c-dev \
    binutils \
    openssl

# sign application and manifest
RUN /graphene/signer/pal-sgx-sign \
    -libpal /graphene/Runtime/libpal-Linux-SGX.so -key \
    /graphene/signer/enclave-key.pem -output ${binary}.manifest.sgx \
    -manifest ${binary}.manifest \
    && chmod u+x ${binary}.manifest.sgx

RUN env DEBIAN_FRONTEND=noninteractive apt-get remove -y \
    binutils openssl \
    && env DEBIAN_FRONTEND=noninteractive apt-get autoremove -y

# Define default command.
ENTRYPOINT  ["/bin/bash", "/apploader.sh"]
CMD []
